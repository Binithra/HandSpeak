import React, { useState, useEffect } from "react";
import Header from "./Header";
import { getAllQuiz, getAllUsers} from "../api";
import { actionType } from "../context/reducer";
import { useStateValue } from "../context/StateProvider";
import QuizCard from "./QuizCard";
import { ws1, ws3, ws5 } from "../assets/img/index";

const Quiz = ({ data }) => {
  const [{ allquiz, allUsers }, dispatch] = useStateValue();
  const [showScore, setShowScore] = useState(true);
  const [score, setScore] = useState(0);
  const [isReady, setIsReady] = useState(false);
  const [emailSent, setEmailSent] = useState(false);

  const handleAnswerSelection = () => {
    setScore((prevScore) => prevScore + 10);
  };

  useEffect(() => {
    // Fetch all quizzes only if not already fetched
    if (!allquiz) {
      getAllQuiz().then((data) => {
        dispatch({
          type: actionType.SET_ALL_QUIZ,
          allquiz: data.quiz,
        });
      });
    }
  }, [allquiz, dispatch]);

  useEffect(() => {
    // Fetch all quizzes only if not already fetched
    if (!allUsers) {
      getAllUsers().then((data) => {
        dispatch({
          type: actionType.SET_ALL_USERS,
          allUsers: data.data,
        });
      });
    }
  }, [allUsers, dispatch]);  

  const startQuiz = () => {
    setIsReady(true);
  };

  useEffect(() => {
    if (score > 90 && !emailSent) {
      sendCertificateEmail();
      setEmailSent(true); 
    }
  }, [score, emailSent]);

  const sendCertificateEmail = (userId) => {
    // Check if allUsers is defined
    if (allUsers) {
      const user = allUsers.find((user) => user.id === userId);
  
      // Check if user and user email are defined
      if (user && user.email) {
        fetch("http://localhost:4000/api/email/sendCertificateEmail", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ email: user.email, score }),
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Network response was not ok");
            }
            return response.json();
          })
          .then((data) => {
            console.log(data);
          })
          .catch((error) => {
            console.error("Error sending email:", error);
          });
      } else {
        console.error("User email is not defined");
      }
    }
  };
  

  return (
    <div className="w-full h-full pb-10 flex flex-col bg-purple-100">
      <Header />

      {!isReady && (
        <div className="flex flex-col">
          <p className=" text-base text-justify p-8 text-gray-700  ml-4">
            <li>
              ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∑è‡∑Ä‡∂Ω‡∑í‡∂∫ ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ô‡∂±‡∑ä ‡∂¥‡∑É‡∑î ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ì ‡∂á‡∂≠‡∑í ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä‡∑ô‡∂±‡∑ä
              ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±.
            </li>
            <li>
              ‡∂î‡∂∂ ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∑è‡∑Ä‡∂Ω‡∑í‡∂∫ ‡∑É‡∂≥‡∑Ñ‡∑è <b> ‡∂Ω‡∂ö‡∑î‡∂´‡∑î 90 ‡∂ß ‡∑Ä‡∂©‡∑è </b> ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ä‡∂±‡∑ö ‡∂±‡∂∏‡∑ä, ‡∂Ö‡∂¥‡∑í
              ‡∂î‡∂∂‡∑ö ‡∂¥‡∑è‡∂®‡∂∏‡∑è‡∂Ω‡∑è‡∑Ä ‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∑É‡∑Ñ‡∂≠‡∑í‡∂ö‡∂∫ ‡∑É‡∂∏‡∂ü ‡∑Ä‡∑í‡∂Ø‡∑ä‚Äç‡∂∫‡∑î‡∂≠‡∑ä ‡∂≠‡∑ê‡∂¥‡∑ë‡∂Ω‡∂ö‡∑ä ‡∂ë‡∑Ä‡∂±‡∑ä‡∂±‡∑ô‡∂∏‡∑î.
            </li>
            <li>
              ‡∂î‡∂∂‡∂ß ‡∂Ω‡∂ö‡∑î‡∂´‡∑î 90 ‡∂ß ‡∑Ä‡∂©‡∑è ‡∂Ö‡∂©‡∑î ‡∂±‡∂∏‡∑ä, ‡∂î‡∂∂‡∂ß ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∑è‡∑Ä‡∂Ω‡∑í‡∂∫ ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫.
            </li>
            <li>‡∂î‡∂∂‡∂ß ‡∑É‡∑î‡∂∑ ‡∂¥‡∑ê‡∂≠‡∑î‡∂∏‡∑ä!</li>
          </p>
          <p className=" flex text-2xl items-center justify-center font-semibold p-8 text-gray-700 ">
            ‡∂î‡∂∂ ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∑è‡∑Ä‡∂Ω‡∑í‡∂∫ ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∑É‡∑ñ‡∂Ø‡∑è‡∂±‡∂∏‡∑ä‡∂Ø?
            <button
              className="flex ml-12 px-8 py-4 rounded-lg text-xl bg-purple-700 border-red-400 border-2 text-white"
              onClick={startQuiz}
            >
              ‡∂î‡∑Ä‡∑ä
            </button>
          </p>

          <div className="flex ml-64 gap-12 mt-6 ">
            <img src={ws1} className=" shadow-md h-72 rounded-lg"></img>
            <img src={ws3} className=" shadow-md h-72 rounded-lg"></img>
            <img src={ws5} className="shadow-md h-72 rounded-lg"></img>
          </div>
        </div>
      )}

      {isReady && (
        <>
          <div className="flex items-center justify-center text-2xl font-semibold p-8 align-center">
            ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∑è‡∑Ä‡∂Ω‡∑í ‡∑É‡∂∏‡∑ä‡∂¥‡∑ñ‡∂ª‡∑ä‡∂´ ‡∂ö‡∂ª‡∂∏‡∑î
          </div>
          <QuizCardContainer
            data={allquiz}
            handleAnswerSelection={handleAnswerSelection}
            setScore={setScore}
          />
          <div
            className={
              showScore
                ? "d-flex flex items-center justify-center text-red-800 font-semibold rounded-lg bg-purple-300 h-14 text-3xl mt-6"
                : "d-none"
            }
          >
            ‡∂î‡∂∂‡∑ö ‡∂Ω‡∂ö‡∑î‡∂´‡∑î : {score}
          </div>
          <div className=" mt-12  items-center justify-center">
            {score <= 90 && (
              <a
                href="/Quiz"
                className="w-24 bg-orange-300 p-4 rounded-lg ml-8"
              >
                ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
              </a>
            )}
            {score > 90 && (
              <p className=" flex w-auto  items-center justify-center bg-success p-4 rounded-lg">
                ‡∑É‡∑î‡∂∑ ‡∂¥‡∑ê‡∂≠‡∑î‡∂∏‡∑ä ü•≥üéâ!! ‡∂Ø‡∑ê‡∂±‡∑ä ‡∂î‡∂∂‡∂ß ‡∂î‡∂∂‡∑ö ‡∑Ä‡∑í‡∂Ø‡∑ä‚Äç‡∂∫‡∑î‡∂≠‡∑ä ‡∂≠‡∑ê‡∂¥‡∑ê‡∂Ω‡∑ä ‡∂Ω‡∑í‡∂¥‡∑í‡∂±‡∂∫ ‡∑É‡∂≥‡∑Ñ‡∑è
                ‡∂¥‡∑è‡∂®‡∂∏‡∑è‡∂Ω‡∑è ‡∑É‡∂∏‡∑ä‡∂¥‡∑ñ‡∂ª‡∑ä‡∂´ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∑É‡∑Ñ‡∂≠‡∑í‡∂ö‡∂∫‡∂ö‡∑ä ‡∂Ω‡∑ê‡∂∂‡∑ô‡∂±‡∑î ‡∂á‡∂≠.
              </p>
            )}
          </div>
        </>
      )}
    </div>
  );
};

export const QuizCardContainer = ({
  data,
  handleAnswerSelection,
  setScore,
}) => {
  const [isDelete, setIsDelete] = useState({});
  const [selectedQuiz, setSelectedQuiz] = useState(null);

  return (
    <div className=" flex flex-wrap gap-3 items-center justify-evenly">
      {Array.isArray(data) &&
        data.map((quiz, i) => (
          <QuizCard
            key={quiz._id}
            data={quiz}
            index={i}
            handleAnswerSelection={handleAnswerSelection}
            setScore={setScore}
            // handleOptionChange={handleOptionChange}
            isDelete={isDelete}
            setIsDelete={setIsDelete}
            formatDate={(dateString) => {
              const options = {
                year: "numeric",
                month: "long",
                day: "numeric",
              };
              return new Date(dateString).toLocaleDateString(
                undefined,
                options
              );
            }}
          />
        ))}
    </div>
  );
};

export default Quiz;
